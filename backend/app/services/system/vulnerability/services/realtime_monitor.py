import time
import psutil
from socketio import Client
from typing import Optional
from ..core.models import Vulnerability, ThreatLevel
from ..core.utils import get_system_info
from config import settings


class RealTimeMonitor:
    def __init__(self, sio: Optional[Client] = None):
        self.sio = sio
        self.baselines = {}
        self._establish_baselines()

    def _emit_event(self, event: str, data: dict):
        if self.sio:
            self.sio.emit(event, data)

    def _establish_baselines(self):
        """Establish normal system behavior baselines"""
        self.baselines["cpu"] = psutil.cpu_percent(interval=1)
        self.baselines["memory"] = psutil.virtual_memory().percent
        self.baselines["network"] = (
            psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv
        )
        self.baselines["process_count"] = len(psutil.pids())

    def _check_anomalies(self) -> list:
        """Check for deviations from baseline"""
        anomalies = []

        # CPU check
        current_cpu = psutil.cpu_percent(interval=1)
        if (
            current_cpu > self.baselines["cpu"] * 2 and current_cpu > 80
        ):  # 2x baseline and >80%
            anomalies.append(
                Vulnerability(
                    id="cpu_spike",
                    name="CPU Usage Spike",
                    description=f"CPU usage spike detected: {current_cpu}%",
                    threat_level=ThreatLevel.MEDIUM,
                    risk_score=50.0,
                    evidence=f"Current: {current_cpu}%, Baseline: {self.baselines['cpu']}%",
                    mitigation="Investigate running processes",
                )
            )

        # Network check
        current_net = psutil.net_io_counters()
        current_net_total = current_net.bytes_sent + current_net.bytes_recv
        if current_net_total > self.baselines["network"] * 3:  # 3x baseline
            anomalies.append(
                Vulnerability(
                    id="network_spike",
                    name="Network Activity Spike",
                    description="Unusual network activity detected",
                    threat_level=ThreatLevel.HIGH,
                    risk_score=70.0,
                    evidence=f"Current: {current_net_total}, Baseline: {self.baselines['network']}",
                    mitigation="Check network connections and bandwidth usage",
                )
            )

        # Process count check
        current_procs = len(psutil.pids())
        if current_procs > self.baselines["process_count"] * 1.5:
            anomalies.append(
                Vulnerability(
                    id="process_spawn",
                    name="Unusual Process Count",
                    description="Significant increase in running processes detected",
                    threat_level=ThreatLevel.MEDIUM,
                    risk_score=40.0,
                    evidence=f"Current: {current_procs}, Baseline: {self.baselines['process_count']}",
                    mitigation="Investigate new processes",
                )
            )

        return anomalies

    def run(self):
        """Main monitoring loop"""
        while True:
            try:
                anomalies = self._check_anomalies()
                if anomalies:
                    self._emit_event(
                        "anomaly_detected",
                        {
                            "timestamp": time.time(),
                            "anomalies": [a.dict() for a in anomalies],
                            "system_info": get_system_info(),
                        },
                    )

                    # Check for critical threats
                    critical_anomalies = [
                        a for a in anomalies if a.threat_level == ThreatLevel.CRITICAL
                    ]
                    if critical_anomalies:
                        self._emit_event(
                            "critical_threat",
                            {
                                "threats": [a.dict() for a in critical_anomalies],
                                "timestamp": time.time(),
                            },
                        )

                time.sleep(settings.SCAN_INTERVAL)

            except Exception as e:
                self._emit_event(
                    "monitor_error", {"error": str(e), "timestamp": time.time()}
                )
                time.sleep(10)  # Wait before retrying
