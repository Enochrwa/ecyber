
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Shield, AlertTriangle, Play, Eye, ExternalLink, Download } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cveId?: string;
  affectedComponent: string;
  remediationAvailable: boolean;
  status: 'detected' | 'remediated' | 'ignored';
}

const VulnerabilityScanner = () => {
  const { toast } = useToast();
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [scanComplete, setScanComplete] = useState(false);
  const [currentTarget, setCurrentTarget] = useState('');
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanScope, setScanScope] = useState('standard');
  const [filterSeverity, setFilterSeverity] = useState('all');
  
  // Common vulnerabilities to simulate findings
  const commonVulnerabilities: Vulnerability[] = [
    {
      id: 'vuln-1',
      name: 'OpenSSL Heartbleed Vulnerability',
      description: 'The TLS/DTLS heartbeat extension in OpenSSL 1.0.1 before 1.0.1g allows remote attackers to obtain sensitive information via crafted packets that trigger a buffer over-read.',
      severity: 'critical',
      cveId: 'CVE-2014-0160',
      affectedComponent: 'OpenSSL 1.0.1f',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-2',
      name: 'Apache Log4j JNDI Injection',
      description: 'Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker-controlled LDAP and other JNDI related endpoints.',
      severity: 'critical',
      cveId: 'CVE-2021-44228',
      affectedComponent: 'Log4j 2.14.1',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-3',
      name: 'Windows Print Spooler Remote Code Execution',
      description: 'A remote code execution vulnerability exists when the Windows Print Spooler service improperly performs privileged file operations.',
      severity: 'critical',
      cveId: 'CVE-2021-34527',
      affectedComponent: 'Windows Print Spooler Service',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-4',
      name: 'Apache Struts Remote Code Execution',
      description: 'Apache Struts contains a vulnerability that allows remote attackers to execute arbitrary code via a crafted Content-Type header.',
      severity: 'high',
      cveId: 'CVE-2017-5638',
      affectedComponent: 'Apache Struts 2.3.5 - 2.3.31',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-5',
      name: 'MySQL Server Authorization Bypass',
      description: 'MySQL Server allows remote authenticated users to bypass intended access restrictions via SQL statements.',
      severity: 'high',
      cveId: 'CVE-2016-6662',
      affectedComponent: 'MySQL Server 5.7.15',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-6',
      name: 'WordPress Plugin SQL Injection',
      description: 'WordPress plugin vulnerable to SQL injection allowing attackers to extract sensitive data from the database.',
      severity: 'medium',
      cveId: 'CVE-2023-12345',
      affectedComponent: 'Contact Form 7 v3.1.2',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-7',
      name: 'Outdated SSL/TLS Protocol',
      description: 'Server supports outdated SSL/TLS protocol versions that are vulnerable to various attacks.',
      severity: 'medium',
      affectedComponent: 'Nginx Server',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-8',
      name: 'Weak Cryptographic Algorithms',
      description: 'Server uses weak cryptographic algorithms that can be broken by attackers.',
      severity: 'medium',
      affectedComponent: 'OpenSSL Configuration',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-9',
      name: 'Insecure CORS Configuration',
      description: 'CORS is configured to allow requests from any origin, potentially allowing cross-domain attacks.',
      severity: 'low',
      affectedComponent: 'Web Application',
      remediationAvailable: true,
      status: 'detected'
    },
    {
      id: 'vuln-10',
      name: 'Missing HTTP Security Headers',
      description: 'Server responses lack important security headers like Content-Security-Policy and X-XSS-Protection.',
      severity: 'low',
      affectedComponent: 'Web Server Configuration',
      remediationAvailable: true,
      status: 'detected'
    }
  ];
  
  // Scan targets for simulation
  const scanTargets = [
    'Scanning network services...',
    'Checking web application security...',
    'Analyzing operating system vulnerabilities...',
    'Examining installed software...',
    'Inspecting database configurations...',
    'Testing SSL/TLS implementations...',
    'Checking for outdated components...',
    'Analyzing authentication mechanisms...',
    'Examining access control systems...',
    'Testing for injection vulnerabilities...',
    'Scanning for misconfigurations...',
    'Checking encryption implementations...',
    'Testing for insecure defaults...',
  ];
  
  // Start vulnerability scan
  const startScan = () => {
    setScanning(true);
    setScanComplete(false);
    setProgress(0);
    setVulnerabilities([]);
    setCurrentTarget('');
    
    toast({
      title: "Vulnerability Scan Started",
      description: `Running ${scanScope} scan on system components`,
      variant: "default"
    });
    
    // Number of vulnerabilities to find based on scan scope
    const vulnerabilityCount = scanScope === 'quick' ? 3 : 
                              scanScope === 'comprehensive' ? commonVulnerabilities.length : 
                              5;
    
    let currentIndex = 0;
    const totalSteps = scanTargets.length;
    const foundVulnerabilities: Vulnerability[] = [];
    
    const scanInterval = setInterval(() => {
      if (currentIndex >= totalSteps) {
        clearInterval(scanInterval);
        setScanning(false);
        setScanComplete(true);
        setProgress(100);
        setCurrentTarget('Scan complete');
        
        // Count vulnerabilities by severity
        const criticalCount = foundVulnerabilities.filter(v => v.severity === 'critical').length;
        const highCount = foundVulnerabilities.filter(v => v.severity === 'high').length;
        
        // Show final toast with results
        toast({
          title: "Vulnerability Scan Complete",
          description: `Found ${criticalCount} critical and ${highCount} high vulnerabilities`,
          variant: criticalCount > 0 ? "destructive" : "default"
        });
        
        return;
      }
      
      // Update current target and progress
      setCurrentTarget(scanTargets[currentIndex]);
      setProgress(Math.round((currentIndex / totalSteps) * 100));
      
      // 50% chance to find a vulnerability at each step if we haven't reached the limit
      if (Math.random() > 0.5 && foundVulnerabilities.length < vulnerabilityCount) {
        // Pick a random vulnerability from our list
        const availableVulns = commonVulnerabilities.filter(v => !foundVulnerabilities.find(fv => fv.id === v.id));
        if (availableVulns.length > 0) {
          const randomVuln = availableVulns[Math.floor(Math.random() * availableVulns.length)];
          foundVulnerabilities.push(randomVuln);
          setVulnerabilities([...foundVulnerabilities]);
          
          // Show toast for critical vulnerabilities
          if (randomVuln.severity === 'critical') {
            toast({
              title: "Critical Vulnerability Found",
              description: randomVuln.name,
              variant: "destructive"
            });
          }
        }
      }
      
      currentIndex++;
    }, 1000);
    
    return () => clearInterval(scanInterval);
  };
  
  // Handle remediation of a vulnerability
  const handleRemediation = (id: string) => {
    setVulnerabilities(prev => prev.map(vuln => 
      vuln.id === id ? { ...vuln, status: 'remediated' } : vuln
    ));
    
    const vulnerability = vulnerabilities.find(v => v.id === id);
    if (vulnerability) {
      toast({
        title: "Vulnerability Remediated",
        description: vulnerability.name,
        variant: "default"
      });
    }
  };
  
  // Handle ignoring a vulnerability
  const handleIgnore = (id: string) => {
    setVulnerabilities(prev => prev.map(vuln => 
      vuln.id === id ? { ...vuln, status: 'ignored' } : vuln
    ));
  };
  
  // Get badge for vulnerability severity
  const getSeverityBadge = (severity: 'critical' | 'high' | 'medium' | 'low') => {
    switch (severity) {
      case 'critical':
        return <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500">Critical</Badge>;
      case 'high':
        return <Badge variant="outline" className="bg-amber-500/10 text-amber-500 border-amber-500">High</Badge>;
      case 'medium':
        return <Badge variant="outline" className="bg-orange-500/10 text-orange-500 border-orange-500">Medium</Badge>;
      case 'low':
        return <Badge variant="outline" className="bg-blue-500/10 text-blue-500 border-blue-500">Low</Badge>;
    }
  };
  
  // Filter vulnerabilities by severity
  const filteredVulnerabilities = filterSeverity === 'all' 
    ? vulnerabilities 
    : vulnerabilities.filter(vuln => vuln.severity === filterSeverity);
  
  // Calculate vulnerability statistics
  const totalVulnerabilities = vulnerabilities.length;
  const criticalCount = vulnerabilities.filter(v => v.severity === 'critical').length;
  const highCount = vulnerabilities.filter(v => v.severity === 'high').length;
  const mediumCount = vulnerabilities.filter(v => v.severity === 'medium').length;
  const lowCount = vulnerabilities.filter(v => v.severity === 'low').length;
  const remediatedCount = vulnerabilities.filter(v => v.status === 'remediated').length;

  return (
    <Card className="overflow-hidden shadow-lg border-isimbi-purple/20">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-isimbi-purple" />
          Vulnerability Scanner
        </CardTitle>
        <CardDescription>Scan for system vulnerabilities and security weaknesses</CardDescription>
      </CardHeader>
      
      <CardContent className="p-6">
        {!scanning && !scanComplete ? (
          <div className="space-y-6">
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">Scan Scope</label>
                <Select defaultValue={scanScope} onValueChange={setScanScope}>
                  <SelectTrigger className="mt-1.5">
                    <SelectValue placeholder="Select scan scope" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quick">Quick Scan (Basic Checks)</SelectItem>
                    <SelectItem value="standard">Standard Scan (Recommended)</SelectItem>
                    <SelectItem value="comprehensive">Comprehensive Scan (Full System)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Button onClick={startScan} className="w-full">Run Vulnerability Scan</Button>
              </div>
            </div>
            
            {vulnerabilities.length > 0 && (
              <div className="border rounded-lg p-4 space-y-3">
                <h3 className="font-medium">Previous Scan Results</h3>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Critical:</span>
                    <span className="font-medium text-red-500">{criticalCount}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">High:</span>
                    <span className="font-medium text-amber-500">{highCount}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Medium:</span>
                    <span className="font-medium text-orange-500">{mediumCount}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Low:</span>
                    <span className="font-medium text-blue-500">{lowCount}</span>
                  </div>
                </div>
                <Button variant="outline" size="sm" className="w-full">
                  View Full Report
                </Button>
              </div>
            )}
          </div>
        ) : (
          <div className="space-y-4">
            {scanning && (
              <div className="space-y-2 mb-4">
                <div className="flex justify-between text-sm mb-1">
                  <span>Scanning System...</span>
                  <span>{Math.round(progress)}%</span>
                </div>
                <Progress value={progress} className="h-2" />
                <div className="text-xs text-muted-foreground">{currentTarget}</div>
              </div>
            )}
            
            {filteredVulnerabilities.length > 0 && (
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="font-medium">Vulnerability Report</h3>
                  
                  <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                    <SelectTrigger className="w-[130px] h-8">
                      <SelectValue placeholder="Filter" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical Only</SelectItem>
                      <SelectItem value="high">High Only</SelectItem>
                      <SelectItem value="medium">Medium Only</SelectItem>
                      <SelectItem value="low">Low Only</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="grid grid-cols-4 gap-2 mb-2">
                  <div className={`border rounded-md p-2 text-center ${criticalCount > 0 ? 'bg-red-500/10 border-red-500/30' : ''}`}>
                    <div className="text-xs text-muted-foreground">Critical</div>
                    <div className={`text-xl font-bold ${criticalCount > 0 ? 'text-red-500' : ''}`}>{criticalCount}</div>
                  </div>
                  <div className={`border rounded-md p-2 text-center ${highCount > 0 ? 'bg-amber-500/10 border-amber-500/30' : ''}`}>
                    <div className="text-xs text-muted-foreground">High</div>
                    <div className={`text-xl font-bold ${highCount > 0 ? 'text-amber-500' : ''}`}>{highCount}</div>
                  </div>
                  <div className={`border rounded-md p-2 text-center ${mediumCount > 0 ? 'bg-orange-500/10 border-orange-500/30' : ''}`}>
                    <div className="text-xs text-muted-foreground">Medium</div>
                    <div className={`text-xl font-bold ${mediumCount > 0 ? 'text-orange-500' : ''}`}>{mediumCount}</div>
                  </div>
                  <div className={`border rounded-md p-2 text-center ${lowCount > 0 ? 'bg-blue-500/10 border-blue-500/30' : ''}`}>
                    <div className="text-xs text-muted-foreground">Low</div>
                    <div className={`text-xl font-bold ${lowCount > 0 ? 'text-blue-500' : ''}`}>{lowCount}</div>
                  </div>
                </div>
                
                <div className="space-y-3">
                  {filteredVulnerabilities.map((vulnerability) => (
                    <div 
                      key={vulnerability.id}
                      className={`border rounded-md p-3 ${
                        vulnerability.status === 'remediated' ? 'bg-green-500/5 border-green-500/20' :
                        vulnerability.status === 'ignored' ? 'bg-muted/50 border-muted' :
                        vulnerability.severity === 'critical' ? 'bg-red-500/5 border-red-500/20' :
                        vulnerability.severity === 'high' ? 'bg-amber-500/5 border-amber-500/20' :
                        vulnerability.severity === 'medium' ? 'bg-orange-500/5 border-orange-500/20' :
                        'bg-blue-500/5 border-blue-500/20'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="font-medium">{vulnerability.name}</div>
                        <div className="flex items-center gap-2">
                          {getSeverityBadge(vulnerability.severity)}
                          {vulnerability.status === 'remediated' && (
                            <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">Fixed</Badge>
                          )}
                          {vulnerability.status === 'ignored' && (
                            <Badge variant="outline" className="bg-muted text-muted-foreground border-muted-foreground">Ignored</Badge>
                          )}
                        </div>
                      </div>
                      
                      <div className="text-sm text-muted-foreground mt-1 mb-2">
                        {vulnerability.description}
                      </div>
                      
                      <div className="flex flex-wrap gap-y-2 gap-x-4 text-xs mb-3">
                        <div>
                          <span className="font-medium">Affected Component: </span>
                          <span>{vulnerability.affectedComponent}</span>
                        </div>
                        {vulnerability.cveId && (
                          <div>
                            <span className="font-medium">CVE ID: </span>
                            <span className="underline">{vulnerability.cveId}</span>
                          </div>
                        )}
                      </div>
                      
                      {vulnerability.status === 'detected' && (
                        <div className="flex gap-2">
                          {vulnerability.remediationAvailable && (
                            <Button 
                              size="sm"
                              onClick={() => handleRemediation(vulnerability.id)}
                            >
                              Apply Fix
                            </Button>
                          )}
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => handleIgnore(vulnerability.id)}
                          >
                            Ignore
                          </Button>
                          <Button variant="ghost" size="sm">
                            Details
                          </Button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {!scanning && scanComplete && filteredVulnerabilities.length === 0 && (
              <div className="py-12 text-center">
                <Shield className="mx-auto h-12 w-12 text-green-500 mb-3" />
                <h3 className="text-lg font-medium mb-1">No Vulnerabilities Found</h3>
                <p className="text-muted-foreground">
                  Your system appears to be secure. Regular scanning is recommended.
                </p>
              </div>
            )}
          </div>
        )}
      </CardContent>
      
      <CardFooter className="bg-card/50 border-t border-border/50 flex justify-between">
        {scanning ? (
          <Button variant="outline" onClick={() => setScanning(false)} className="w-full">
            Cancel Scan
          </Button>
        ) : scanComplete ? (
          <div className="w-full flex gap-2">
            <Button variant="default" onClick={startScan} className="flex-1">
              Scan Again
            </Button>
            <Button variant="outline" className="flex items-center gap-1">
              <Download size={14} /> Export Report
            </Button>
          </div>
        ) : (
          <Button onClick={startScan} className="w-full">Run Vulnerability Scan</Button>
        )}
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityScanner;
