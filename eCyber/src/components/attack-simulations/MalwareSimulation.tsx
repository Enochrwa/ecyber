
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Package, AlertTriangle, ActivitySquare, Play, FileCode, Loader2, Code2 } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { ScrollArea } from "@/components/ui/scroll-area";

interface ProcessNode {
  id: string;
  name: string;
  pid: number;
  children: ProcessNode[];
  level: number;
  malicious: boolean;
  cpu: number;
  memory: number;
}

const MalwareSimulation = () => {
  const { toast } = useToast();
  const [isSimulating, setIsSimulating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [processTree, setProcessTree] = useState<ProcessNode | null>(null);
  const [detectedMalware, setDetectedMalware] = useState<string[]>([]);
  const [logs, setLogs] = useState<string[]>([]);
  
  // Generate a process tree
  const generateProcessTree = (): ProcessNode => {
    // Root system process
    return {
      id: 'system',
      name: 'System',
      pid: 1,
      level: 0,
      malicious: false,
      cpu: Math.floor(Math.random() * 5) + 1,
      memory: Math.floor(Math.random() * 200) + 100,
      children: [
        {
          id: 'init',
          name: 'init',
          pid: 100,
          level: 1,
          malicious: false,
          cpu: Math.floor(Math.random() * 2) + 1,
          memory: Math.floor(Math.random() * 50) + 20,
          children: [
            {
              id: 'sshd',
              name: 'sshd',
              pid: 245,
              level: 2,
              malicious: false,
              cpu: Math.floor(Math.random() * 3) + 1,
              memory: Math.floor(Math.random() * 30) + 15,
              children: [],
            },
            {
              id: 'nginx',
              name: 'nginx',
              pid: 300,
              level: 2,
              malicious: false,
              cpu: Math.floor(Math.random() * 10) + 5,
              memory: Math.floor(Math.random() * 200) + 50,
              children: [
                {
                  id: 'php-fpm',
                  name: 'php-fpm',
                  pid: 400,
                  level: 3,
                  malicious: false,
                  cpu: Math.floor(Math.random() * 15) + 5,
                  memory: Math.floor(Math.random() * 150) + 50,
                  children: [],
                }
              ],
            }
          ],
        },
        {
          id: 'cron',
          name: 'cron',
          pid: 120,
          level: 1,
          malicious: false,
          cpu: Math.floor(Math.random() * 1) + 0.5,
          memory: Math.floor(Math.random() * 20) + 10,
          children: [],
        }
      ],
    };
  };
  
  // Start malware simulation
  const startSimulation = () => {
    setIsSimulating(true);
    setProgress(0);
    setDetectedMalware([]);
    
    // Generate initial process tree
    const initialTree = generateProcessTree();
    setProcessTree(initialTree);
    
    addLog("Simulation started: Monitoring process tree for malicious activity");
    addLog("System baseline established, monitoring for deviations");
    
    // Simulate malware injection and propagation
    setTimeout(() => {
      simulateMalwareInjection();
    }, 2000);
  };
  
  // Simulate malware injection
  const simulateMalwareInjection = () => {
    if (!processTree) return;
    
    addLog("ALERT: Unusual process behavior detected on pid 400 (php-fpm)");
    
    // Update process tree with malicious process
    const updatedTree = JSON.parse(JSON.stringify(processTree));
    
    // Find php-fpm process and add malicious child
    const phpProcess = findProcessById(updatedTree, 'php-fpm');
    
    if (phpProcess) {
      // Add malicious process
      const malwareProcess: ProcessNode = {
        id: 'sh-malware',
        name: 'sh',
        pid: 500,
        level: phpProcess.level + 1,
        malicious: true,
        cpu: Math.floor(Math.random() * 5) + 1,
        memory: Math.floor(Math.random() * 10) + 5,
        children: [],
      };
      
      phpProcess.children.push(malwareProcess);
      setProcessTree(updatedTree);
      addLog("ALERT: Suspicious shell spawned by php-fpm process");
      
      // Schedule next phase
      setTimeout(() => {
        simulateMalwarePropagation(updatedTree);
      }, 2000);
    }
    
    setProgress(30);
  };
  
  // Simulate malware propagation
  const simulateMalwarePropagation = (currentTree: ProcessNode) => {
    const updatedTree = JSON.parse(JSON.stringify(currentTree));
    
    // Find malicious shell process
    const shellProcess = findProcessById(updatedTree, 'sh-malware');
    
    if (shellProcess) {
      // Add crypto miner process
      const cryptoMiner: ProcessNode = {
        id: 'crypto-miner',
        name: 'xmrig',
        pid: 520,
        level: shellProcess.level + 1,
        malicious: true,
        cpu: Math.floor(Math.random() * 40) + 60, // High CPU usage
        memory: Math.floor(Math.random() * 200) + 100,
        children: [],
      };
      
      // Add data exfiltration process
      const dataExfil: ProcessNode = {
        id: 'data-exfil',
        name: 'curl',
        pid: 525,
        level: shellProcess.level + 1,
        malicious: true,
        cpu: Math.floor(Math.random() * 5) + 1,
        memory: Math.floor(Math.random() * 20) + 10,
        children: [],
      };
      
      shellProcess.children.push(cryptoMiner);
      shellProcess.children.push(dataExfil);
      
      setProcessTree(updatedTree);
      setDetectedMalware(prev => [...prev, 'xmrig (Cryptocurrency Miner)', 'curl (Data Exfiltration Tool)']);
      
      addLog("CRITICAL: Cryptocurrency mining process detected (xmrig)");
      addLog("CRITICAL: Possible data exfiltration detected (curl sending data to unknown endpoint)");
      
      toast({
        title: "Critical Security Alert",
        description: "Malware activity detected in system processes",
        variant: "destructive"
      });
    }
    
    setProgress(70);
    
    // Schedule termination notification
    setTimeout(() => {
      completeSimulation();
    }, 3000);
  };
  
  // Complete simulation
  const completeSimulation = () => {
    addLog("Analysis complete: Multiple malicious processes identified");
    addLog("Recommendation: Isolate affected processes and initiate remediation");
    
    setProgress(100);
    
    setTimeout(() => {
      setIsSimulating(false);
    }, 1000);
  };
  
  // Helper to find a process by ID in the tree
  const findProcessById = (tree: ProcessNode, id: string): ProcessNode | null => {
    if (tree.id === id) {
      return tree;
    }
    
    for (const child of tree.children) {
      const found = findProcessById(child, id);
      if (found) return found;
    }
    
    return null;
  };
  
  // Add a log entry with timestamp
  const addLog = (message: string) => {
    const timestamp = new Date().toISOString().substring(11, 19);
    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);
  };
  
  // Render a process node and its children
  const renderProcessNode = (node: ProcessNode) => {
    return (
      <div key={node.id} className="mb-2">
        <div 
          className={`flex items-center ${
            node.malicious ? 'text-red-500 font-semibold' : ''
          }`} 
          style={{ paddingLeft: `${node.level * 20}px` }}
        >
          {node.children.length > 0 ? (
            <Code2 size={16} className="mr-1" />
          ) : (
            <FileCode size={16} className="mr-1" />
          )}
          <span>
            {node.name} (PID: {node.pid}) 
            <span className="text-xs ml-2">
              CPU: {node.cpu}% | MEM: {node.memory}MB
            </span>
            {node.malicious && (
              <Badge variant="destructive" className="ml-2">Malicious</Badge>
            )}
          </span>
        </div>
        
        <div>
          {node.children.map(child => renderProcessNode(child))}
        </div>
      </div>
    );
  };

  return (
    <Card className="overflow-hidden shadow-lg border-isimbi-purple/20">
      <CardHeader className="bg-gradient-to-r from-isimbi-navy to-isimbi-dark-charcoal">
        <div className="flex justify-between items-center">
          <div>
            <CardTitle className="flex items-center gap-2">
              <Package className="h-5 w-5 text-isimbi-purple" />
              Malware Propagation
            </CardTitle>
            <CardDescription>Visualize process tree and malware propagation patterns</CardDescription>
          </div>
          <Badge variant={isSimulating ? "destructive" : "outline"} className="ml-2">
            {isSimulating ? "ACTIVE" : "Ready"}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="p-6">
        {/* Progress indicator during simulation */}
        {isSimulating && (
          <div className="mb-4">
            <div className="flex justify-between text-sm mb-1">
              <span>Simulation Progress</span>
              <span>{progress}%</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Process Tree Visualization */}
          <div className="border rounded-lg p-3">
            <h3 className="text-sm font-medium mb-3 flex items-center">
              <ActivitySquare size={16} className="mr-2" />
              Process Tree
            </h3>
            
            <ScrollArea className="h-[300px]">
              {processTree ? (
                renderProcessNode(processTree)
              ) : (
                <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground">
                  <Package className="h-12 w-12 mb-2 opacity-30" />
                  <p>Start simulation to visualize process tree</p>
                </div>
              )}
            </ScrollArea>
          </div>
          
          {/* Logs and Alerts */}
          <div className="border rounded-lg p-3">
            <h3 className="text-sm font-medium mb-3 flex items-center">
              <AlertTriangle size={16} className="mr-2" />
              Activity Logs
            </h3>
            
            <ScrollArea className="h-[300px]">
              {logs.length > 0 ? (
                <div className="space-y-2">
                  {logs.map((log, index) => (
                    <div 
                      key={index} 
                      className={`text-xs font-mono p-1.5 rounded ${
                        log.includes("CRITICAL") ? "bg-red-500/10 text-red-500" :
                        log.includes("ALERT") ? "bg-amber-500/10 text-amber-500" :
                        "text-muted-foreground"
                      }`}
                    >
                      {log}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="flex items-center justify-center h-full text-center text-muted-foreground">
                  <p>No logs available</p>
                </div>
              )}
            </ScrollArea>
          </div>
        </div>
        
        {/* Detected Malware */}
        {detectedMalware.length > 0 && (
          <div className="mt-4 p-3 border rounded-lg bg-red-500/5 border-red-500/30">
            <h3 className="text-sm font-medium mb-2 text-red-500 flex items-center">
              <AlertTriangle size={16} className="mr-2" />
              Detected Malware
            </h3>
            <ul className="space-y-1">
              {detectedMalware.map((malware, index) => (
                <li key={index} className="text-sm flex items-center">
                  <span className="h-1.5 w-1.5 rounded-full bg-red-500 mr-2"></span>
                  {malware}
                </li>
              ))}
            </ul>
          </div>
        )}
      </CardContent>
      
      <CardFooter className="bg-card/50 border-t border-border/50 flex justify-between">
        <div className="text-xs text-muted-foreground">
          {detectedMalware.length > 0 
            ? `${detectedMalware.length} malicious processes detected` 
            : "No malware detected"}
        </div>
        <Button 
          onClick={startSimulation} 
          disabled={isSimulating}
          className="gap-2"
        >
          {isSimulating ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              Simulating...
            </>
          ) : (
            <>
              <Play className="h-4 w-4" />
              Simulate Propagation
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default MalwareSimulation;
