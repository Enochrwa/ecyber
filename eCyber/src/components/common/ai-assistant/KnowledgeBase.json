[
  {
    "id": "firewall",
    "name": "Firewall",
    "keywords": ["firewall", "network security", "packet filtering", "rules"],
    "description": "The firewall monitors and controls incoming and outgoing network traffic based on predetermined security rules. It acts as a barrier between a trusted internal network and untrusted external networks.",
    "components": [
      {
        "name": "FirewallManager (backend)",
        "type": "backend",
        "description": "Manages firewall rules, logs firewall events, and interacts with the system's underlying firewall (e.g., iptables, nftables)."
      },
      {
        "name": "firewall_api.py (backend)",
        "type": "backend",
        "description": "Provides API endpoints for managing firewall rules and retrieving firewall logs."
      },
      {
        "name": "FirewallEventsTable (frontend)",
        "type": "frontend",
        "description": "Displays firewall events and logs in the user interface."
      },
      {
        "name": "FirewallPage (frontend)",
        "type": "frontend",
        "description": "Allows users to view firewall status, manage rules, and see event logs."
      }
    ],
    "dataFlow": "Network packets arrive at the system. The FirewallManager inspects packets against configured rules. Allowed packets pass through, while denied packets are blocked and logged. Logs are sent to the backend API and can be viewed on the frontend.",
    "configuration": "Firewall rules can be configured through the 'Firewall' section in the application. Rules can be based on IP address, port number, protocol, and direction (incoming/outgoing).",
    "troubleshooting": "If legitimate traffic is being blocked, check the firewall rules for misconfigurations. Ensure the firewall service is running. Check firewall logs for details on blocked packets.",
    "relatedTopics": ["network_security", "ids_ips", "packet_filtering"]
  },
  {
    "id": "threat_intelligence",
    "name": "Threat Intelligence",
    "keywords": ["threat intel", "ip reputation", "malicious ips", "threat feeds"],
    "description": "Threat intelligence involves gathering and analyzing information about current and potential cyber threats. This system uses various feeds to check IP reputation and identify potentially malicious activity.",
    "components": [
      {
        "name": "ThreatIntelligenceService (backend)",
        "type": "backend",
        "description": "Checks IP reputation against multiple threat feeds (AbuseIPDB, VirusTotal, etc.) and internal blocklists. Caches results for performance."
      },
      {
        "name": "threat_intel_api.py (backend)",
        "type": "backend",
        "description": "Provides API endpoints for querying IP reputation."
      },
      {
        "name": "ThreatIntelPage (frontend)",
        "type": "frontend",
        "description": "Allows users to look up IP reputation and view threat feed information."
      }
    ],
    "dataFlow": "An IP address is submitted for a reputation check (either automatically by the system or manually by a user). The ThreatIntelligenceService queries external feeds and its cache. The aggregated result, including a threat score and any known malicious activities, is returned.",
    "configuration": "Threat intelligence feeds can be configured in the settings. API keys for services like VirusTotal or AbuseIPDB may be required. Cache settings (TTL) can also be adjusted.",
    "troubleshooting": "If IP reputation checks are failing, ensure API keys are correct and that the system has internet access to query external feeds. Check if Redis (if used for caching) is running correctly.",
    "relatedTopics": ["network_security", "malware_detection", "ids_ips"]
  },
  {
    "id": "electron_packaging",
    "name": "Electron Application Packaging",
    "keywords": ["electron", "desktop app", "packaging", "cross-platform"],
    "description": "The system can be packaged as a cross-platform desktop application using Electron. This allows it to run on Windows, macOS, and Linux.",
    "components": [
      {
        "name": "eCyber/electron/main.js (frontend)",
        "type": "frontend",
        "description": "The main Electron process script. Handles window creation and application lifecycle events."
      },
      {
        "name": "eCyber/electron/preload.js (frontend)",
        "type": "frontend",
        "description": "A script that runs before web page is loaded into the browser window. Used to securely expose Node.js APIs to the renderer process."
      },
      {
        "name": "electron-builder (tool)",
        "type": "tool",
        "description": "A tool used to package and build a ready for distribution Electron app for macOS, Windows and Linux."
      }
    ],
    "dataFlow": "The React frontend application (eCyber) is built into static assets. Electron then loads these assets into a native desktop window. The main.js script manages the application window and system interactions, while preload.js can bridge between the web content and Electron's Node.js environment.",
    "configuration": "Electron packaging is typically configured in package.json using the 'build' section for electron-builder. This includes settings for app ID, product name, icons, file associations, and platform-specific options (Windows, macOS, Linux).",
    "troubleshooting": "Common packaging issues include incorrect paths to icons or build assets, problems with native module compilation, or platform-specific signing errors. Ensure Node.js and npm/yarn are correctly set up. Check electron-builder documentation for specific error codes or issues.",
    "relatedTopics": []
  }
]
